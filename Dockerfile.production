# Production Dockerfile f√ºr Walter Braun Umz√ºge mit Blog-System
FROM node:18-alpine AS base

# Dependencies Stage
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci

# Builder Stage 
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build frontend (Vite build)
RUN npm run build

# Production Stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=5000

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy production dependencies
COPY package.json package-lock.json* ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application and all server files
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/server ./server
COPY --from=builder --chown=nextjs:nodejs /app/shared ./shared

# Install tsx for TypeScript execution
RUN npm install tsx

# Create production server file that uses the real server
COPY --chown=nextjs:nodejs <<'EOF' /app/serve-production.js
// Production server that runs the real TypeScript server with tsx
import { spawn } from 'child_process';

function log(message, source = "production") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric", minute: "2-digit", second: "2-digit", hour12: true,
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}

log('üöÄ Starting Walter Braun Umz√ºge Production Server...');
log('Using tsx to run TypeScript server with full Blog system');

// Set production environment
process.env.NODE_ENV = 'production';

// Start the real server with tsx
const serverProcess = spawn('npx', ['tsx', 'server/index.ts'], {
  stdio: 'inherit',
  env: process.env
});

serverProcess.on('error', (error) => {
  log(`Failed to start server: ${error.message}`, 'error');
  process.exit(1);
});

serverProcess.on('exit', (code) => {
  log(`Server process exited with code ${code}`, 'error');
  process.exit(code);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  log('SIGTERM received, shutting down...');
  serverProcess.kill('SIGTERM');
});

process.on('SIGINT', () => {
  log('SIGINT received, shutting down...');
  serverProcess.kill('SIGINT');
});
EOF

# Create directories
RUN mkdir -p uploads logs
RUN chown nextjs:nodejs uploads logs

USER nextjs

EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["node", "serve-production.js"]