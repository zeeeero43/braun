üé® RUNWARE API - Funktionierende Implementierung
// WICHTIG: Verwende diese exakte API-Struktur!
async generateImage(prompt: string): Promise<string> {
  const taskUUID = randomUUID(); // Wichtig: Eindeutige Task-UUID!
  // Request Body als ARRAY (nicht Objekt!)
  const requestBody = [
    {
      taskType: "imageInference",  // Exakt so schreiben
      taskUUID: taskUUID,          // Pflichtfeld
      positivePrompt: prompt,      // Nicht nur "prompt"
      model: "runware:101@1",      // FLUX.1 Dev - funktioniert perfekt
      width: 1024,
      height: 1024,
      steps: 20,                   // Balance zwischen Qualit√§t und Geschwindigkeit
      numberResults: 1
    }
  ];
  const response = await fetch('https://api.runware.ai/v1', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.apiKey}` // Bearer Prefix wichtig!
    },
    body: JSON.stringify(requestBody) // Array, nicht einzelnes Objekt
  });
  // Response-Struktur pr√ºfen
  const data = await response.json();
  
  // Fehlerbehandlung - wichtig!
  if (data.errors && data.errors.length > 0) {
    throw new Error(`Runware API error: ${data.errors[0].message}`);
  }
  // Bild-URL extrahieren (data ist Array!)
  const imageURL = data.data?.[0]?.imageURL;
  if (!imageURL) {
    throw new Error('No image URL received');
  }
  return imageURL;
}
Entscheidende Unterschiede, die oft √ºbersehen werden:

‚úÖ Request Body muss ein Array sein [{...}]
‚úÖ taskType: "imageInference" (exakte Schreibweise)
‚úÖ taskUUID ist Pflichtfeld
‚úÖ positivePrompt statt prompt
‚úÖ model: "runware:101@1" (FLUX.1 Dev)
üìù DEEPSEEK - L√§ngere Artikel (funktionierend)
// Entscheidend: max_tokens auf 4000!
const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${apiKey}`,
  },
  body: JSON.stringify({
    model: 'deepseek-chat',
    messages: [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ],
    max_tokens: 4000,        // SEHR WICHTIG f√ºr lange Artikel!
    temperature: 0.7,        // Balance zwischen Kreativit√§t und Konsistenz
  }),
});
System Prompt Technik f√ºr l√§ngere Artikel:

const systemPrompt = `
CONTENT-ANFORDERUNGEN:
1. SEO-optimiert mit nat√ºrlicher Keyword-Integration
2. Mindestens 1200-2000 W√∂rter pro Artikel ‚¨ÖÔ∏è KLARE MINDESTWORTZAHL
3. Strukturiert mit √úberschriften, Listen, Tabellen
4. KEINE Abk√ºrzungen - vollst√§ndige Ausf√ºhrungen
5. Jeder Punkt ausf√ºhrlich erkl√§ren
6. Praktische Beispiele und Fallstudien einbauen
7. Tabellen f√ºr Vergleiche verwenden (verl√§ngert Content)
SCHREIBANWEISUNG:
- Jedes Thema in mindestens 3-4 Abs√§tzen behandeln
- Detaillierte Erkl√§rungen mit Beispielen
- Listen mit mindestens 5-7 Punkten pro Kategorie
- Tabellen mit Kostenvergleichen, Standards, Verfahren
- FAQ-Bereich mit ausf√ºhrlichen Antworten
WICHTIG: Der Artikel MUSS mindestens 1500 W√∂rter haben!
Verwenden Sie diese Struktur:
- Einleitung (200+ W√∂rter)
- Hauptteil in 4-6 Abschnitten (je 200+ W√∂rter)
- Praktische Tipps (200+ W√∂rter) 
- Standards/Vergleichstabellen (100+ W√∂rter)
- FAQ-Bereich (200+ W√∂rter)
- Zusammenfassung (100+ W√∂rter)
`;
User Prompt Verst√§rkung:

const userPrompt = `
Erstellen Sie einen SEHR AUSF√úHRLICHEN Artikel:
WORTANZAHL: MINDESTENS 2000 W√ñRTER! 
- Jeder Abschnitt soll mindestens 300 W√∂rter haben
- Verwenden Sie Tabellen, Listen und detaillierte Erkl√§rungen
- Keine Zusammenfassungen - vollst√§ndige Ausf√ºhrungen
- Praktische Beispiele mit konkreten Zahlen und Verfahren
STRUKTUR ERWEITERN:
1. Ausf√ºhrliche Einleitung (300+ W√∂rter)
2. Technische Details (400+ W√∂rter)
3. Praktische Anwendung (400+ W√∂rter)
4. Kostenanalyse mit Tabelle (300+ W√∂rter)
5. Standards und Zertifizierungen (300+ W√∂rter)
6. FAQ mit ausf√ºhrlichen Antworten (300+ W√∂rter)
Der Artikel MUSS lang und detailliert sein - keine K√ºrzungen!
`;
Funktionierender API-Key: ze0oMKK1mkscXUoWaDjkJEYJ29BfqKj5

Die entscheidenden Faktoren:

‚úÖ max_tokens: 4000 (nicht 2000!)
‚úÖ Explizite Wortanzahl-Anforderung im System Prompt
‚úÖ Strukturierte Abschnitte mit Mindestl√§nge
‚úÖ Tabellen und Listen verl√§ngern den Content
‚úÖ "KEINE Zusammenfassungen" im Prompt
Probiere diese exakten Implementierungen aus - sie funktionieren bei uns seit Monaten ohne Probleme!